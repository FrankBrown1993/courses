/**
 * generated by Xtext 2.32.0
 */
package swa.dsl.courses.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import swa.dsl.courses.orga.Course;
import swa.dsl.courses.orga.Declaration;
import swa.dsl.courses.orga.Student;
import swa.dsl.courses.orga.Teacher;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class OrgaGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = null;
    if (_contents!=null) {
      _head=IterableExtensions.<EObject>head(_contents);
    }
    boolean _tripleEquals = (_head == null);
    if (_tripleEquals) {
      return;
    }
    final Iterable<Declaration> declarations = Iterables.<Declaration>filter(IterableExtensions.<EObject>head(resource.getContents()).eContents(), Declaration.class);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<html>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<body class=\"flexVStart\">");
    _builder.newLine();
    {
      Iterable<Course> _filter = Iterables.<Course>filter(declarations, Course.class);
      for(final Course course : _filter) {
        _builder.append("\t\t");
        _builder.append("<div class=\"flexHCenter\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<h1>");
        String _title = course.getTitle();
        _builder.append(_title, "\t\t\t");
        _builder.append("</h1>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("</div>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<div class=\"flexHSpaceAround\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<div class=\"flexVStart\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("<div class=\"flexHCenter\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("<h2>Teacher</h2>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("</div>");
        _builder.newLine();
        {
          EList<Teacher> _teachers = course.getTeachers();
          for(final Teacher teacher : _teachers) {
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("<div class=\"flexHCenter\">");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("\t");
            String _name = teacher.getName();
            _builder.append(_name, "\t\t\t\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("</div>");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("</div>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<div class=\"flexVStart\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("<div class=\"flexHCenter\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("<h2>Students</h2>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("</div>");
        _builder.newLine();
        {
          EList<Student> _students = course.getStudents();
          for(final Student student : _students) {
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("<div class=\"flexHCenter\">");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("\t");
            String _name_1 = student.getName();
            _builder.append(_name_1, "\t\t\t\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t\t");
            _builder.append("</div>");
            _builder.newLine();
          }
        }
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("</div>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</div>\t\t\t\t\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    fsa.generateFile("index.html", _builder);
  }
}
