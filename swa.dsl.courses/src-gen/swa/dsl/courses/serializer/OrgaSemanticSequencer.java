/*
 * generated by Xtext 2.32.0
 */
package swa.dsl.courses.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import swa.dsl.courses.orga.Course;
import swa.dsl.courses.orga.Model;
import swa.dsl.courses.orga.OrgaPackage;
import swa.dsl.courses.orga.Room;
import swa.dsl.courses.orga.Student;
import swa.dsl.courses.orga.Teacher;
import swa.dsl.courses.services.OrgaGrammarAccess;

@SuppressWarnings("all")
public class OrgaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private OrgaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == OrgaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case OrgaPackage.COURSE:
				sequence_Course(context, (Course) semanticObject); 
				return; 
			case OrgaPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case OrgaPackage.ROOM:
				sequence_Room(context, (Room) semanticObject); 
				return; 
			case OrgaPackage.STUDENT:
				sequence_Student(context, (Student) semanticObject); 
				return; 
			case OrgaPackage.TEACHER:
				sequence_Teacher(context, (Teacher) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Declaration returns Course
	 *     Course returns Course
	 *
	 * Constraint:
	 *     (
	 *         title=STRING 
	 *         major=STRING 
	 *         type=STRING 
	 *         audience=AudienceSize 
	 *         course_cat=STRING 
	 *         teachers+=Teacher+ 
	 *         students+=Student*
	 *     )
	 * </pre>
	 */
	protected void sequence_Course(ISerializationContext context, Course semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     declarations+=Declaration+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Declaration returns Room
	 *     Room returns Room
	 *
	 * Constraint:
	 *     (location=STRING audience=AudienceSize)
	 * </pre>
	 */
	protected void sequence_Room(ISerializationContext context, Room semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OrgaPackage.Literals.ROOM__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OrgaPackage.Literals.ROOM__LOCATION));
			if (transientValues.isValueTransient(semanticObject, OrgaPackage.Literals.DECLARATION__AUDIENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OrgaPackage.Literals.DECLARATION__AUDIENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoomAccess().getLocationSTRINGTerminalRuleCall_1_0(), semanticObject.getLocation());
		feeder.accept(grammarAccess.getRoomAccess().getAudienceAudienceSizeEnumRuleCall_3_0(), semanticObject.getAudience());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Student returns Student
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Student(ISerializationContext context, Student semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OrgaPackage.Literals.STUDENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OrgaPackage.Literals.STUDENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStudentAccess().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Teacher returns Teacher
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Teacher(ISerializationContext context, Teacher semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, OrgaPackage.Literals.TEACHER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, OrgaPackage.Literals.TEACHER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTeacherAccess().getNameSTRINGTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
