/*
 * generated by Xtext 2.32.0
 */
package swa.dsl.courses.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OrgaGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swa.dsl.courses.Orga.Model");
		private final Assignment cDeclarationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_0 = (RuleCall)cDeclarationsAssignment.eContents().get(0);
		
		//Model:
		//    declarations+=Declaration*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment() { return cDeclarationsAssignment; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_0() { return cDeclarationsDeclarationParserRuleCall_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swa.dsl.courses.Orga.Declaration");
		private final RuleCall cCourseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Declaration :
		//    Course
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Course
		public RuleCall getCourseParserRuleCall() { return cCourseParserRuleCall; }
	}
	public class CourseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swa.dsl.courses.Orga.Course");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCourseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cTeachedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cByKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTeachersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTeachersTeacherParserRuleCall_4_0 = (RuleCall)cTeachersAssignment_4.eContents().get(0);
		private final Keyword cVisitedKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cByKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStudentsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStudentsStudentParserRuleCall_7_0 = (RuleCall)cStudentsAssignment_7.eContents().get(0);
		
		//Course:
		//    'Course' title=STRING
		//    'teached' 'by'
		//        (teachers+=Teacher)+
		//    'visited' 'by'
		//        (students+=Student)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'Course' title=STRING
		//'teached' 'by'
		//    (teachers+=Teacher)+
		//'visited' 'by'
		//    (students+=Student)+
		public Group getGroup() { return cGroup; }
		
		//'Course'
		public Keyword getCourseKeyword_0() { return cCourseKeyword_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }
		
		//'teached'
		public Keyword getTeachedKeyword_2() { return cTeachedKeyword_2; }
		
		//'by'
		public Keyword getByKeyword_3() { return cByKeyword_3; }
		
		//(teachers+=Teacher)+
		public Assignment getTeachersAssignment_4() { return cTeachersAssignment_4; }
		
		//Teacher
		public RuleCall getTeachersTeacherParserRuleCall_4_0() { return cTeachersTeacherParserRuleCall_4_0; }
		
		//'visited'
		public Keyword getVisitedKeyword_5() { return cVisitedKeyword_5; }
		
		//'by'
		public Keyword getByKeyword_6() { return cByKeyword_6; }
		
		//(students+=Student)+
		public Assignment getStudentsAssignment_7() { return cStudentsAssignment_7; }
		
		//Student
		public RuleCall getStudentsStudentParserRuleCall_7_0() { return cStudentsStudentParserRuleCall_7_0; }
	}
	public class TeacherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swa.dsl.courses.Orga.Teacher");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Teacher:
		//    name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class StudentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swa.dsl.courses.Orga.Student");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Student:
		//    name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final DeclarationElements pDeclaration;
	private final CourseElements pCourse;
	private final TeacherElements pTeacher;
	private final StudentElements pStudent;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OrgaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDeclaration = new DeclarationElements();
		this.pCourse = new CourseElements();
		this.pTeacher = new TeacherElements();
		this.pStudent = new StudentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("swa.dsl.courses.Orga".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    declarations+=Declaration*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Declaration :
	//    Course
	//;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Course:
	//    'Course' title=STRING
	//    'teached' 'by'
	//        (teachers+=Teacher)+
	//    'visited' 'by'
	//        (students+=Student)+;
	public CourseElements getCourseAccess() {
		return pCourse;
	}
	
	public ParserRule getCourseRule() {
		return getCourseAccess().getRule();
	}
	
	//Teacher:
	//    name=STRING;
	public TeacherElements getTeacherAccess() {
		return pTeacher;
	}
	
	public ParserRule getTeacherRule() {
		return getTeacherAccess().getRule();
	}
	
	//Student:
	//    name=STRING;
	public StudentElements getStudentAccess() {
		return pStudent;
	}
	
	public ParserRule getStudentRule() {
		return getStudentAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
