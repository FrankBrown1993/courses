/*
 * generated by Xtext 2.32.0
 */
package swa.dsl.courses.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OrgaGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swa.dsl.courses.Orga.Model");
		private final Assignment cDeclarationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_0 = (RuleCall)cDeclarationsAssignment.eContents().get(0);
		
		//Model:
		//    declarations+=Declaration*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment() { return cDeclarationsAssignment; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_0() { return cDeclarationsDeclarationParserRuleCall_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swa.dsl.courses.Orga.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCourseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRoomParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration :
		//    Course | Room
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Course | Room
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Course
		public RuleCall getCourseParserRuleCall_0() { return cCourseParserRuleCall_0; }
		
		//Room
		public RuleCall getRoomParserRuleCall_1() { return cRoomParserRuleCall_1; }
	}
	public class CourseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swa.dsl.courses.Orga.Course");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCourseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cMajorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMajorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMajorSTRINGTerminalRuleCall_3_0 = (RuleCall)cMajorAssignment_3.eContents().get(0);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cIsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeSTRINGTerminalRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		private final Keyword cAudienceKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cIsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAudienceAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAudienceAudienceSizeEnumRuleCall_9_0 = (RuleCall)cAudienceAssignment_9.eContents().get(0);
		private final Keyword cCourseKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cCategoryKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cCourse_catAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cCourse_catSTRINGTerminalRuleCall_12_0 = (RuleCall)cCourse_catAssignment_12.eContents().get(0);
		private final Keyword cTaughtKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cByKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cTeachersAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cTeachersTeacherParserRuleCall_15_0 = (RuleCall)cTeachersAssignment_15.eContents().get(0);
		private final Keyword cVisitedKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cByKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cStudentsAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cStudentsStudentParserRuleCall_18_0 = (RuleCall)cStudentsAssignment_18.eContents().get(0);
		
		//Course:
		//    'Course' title=STRING
		//    'major' major=STRING
		//    'type' 'is' type=STRING
		//    'audience' 'is' audience=AudienceSize
		//    'course' 'category' course_cat=STRING
		//    'taught' 'by'
		//        (teachers+=Teacher)+
		//    'visited' 'by'
		//        (students+=Student)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Course' title=STRING
		//'major' major=STRING
		//'type' 'is' type=STRING
		//'audience' 'is' audience=AudienceSize
		//'course' 'category' course_cat=STRING
		//'taught' 'by'
		//    (teachers+=Teacher)+
		//'visited' 'by'
		//    (students+=Student)*
		public Group getGroup() { return cGroup; }
		
		//'Course'
		public Keyword getCourseKeyword_0() { return cCourseKeyword_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }
		
		//'major'
		public Keyword getMajorKeyword_2() { return cMajorKeyword_2; }
		
		//major=STRING
		public Assignment getMajorAssignment_3() { return cMajorAssignment_3; }
		
		//STRING
		public RuleCall getMajorSTRINGTerminalRuleCall_3_0() { return cMajorSTRINGTerminalRuleCall_3_0; }
		
		//'type'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//'is'
		public Keyword getIsKeyword_5() { return cIsKeyword_5; }
		
		//type=STRING
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_6_0() { return cTypeSTRINGTerminalRuleCall_6_0; }
		
		//'audience'
		public Keyword getAudienceKeyword_7() { return cAudienceKeyword_7; }
		
		//'is'
		public Keyword getIsKeyword_8() { return cIsKeyword_8; }
		
		//audience=AudienceSize
		public Assignment getAudienceAssignment_9() { return cAudienceAssignment_9; }
		
		//AudienceSize
		public RuleCall getAudienceAudienceSizeEnumRuleCall_9_0() { return cAudienceAudienceSizeEnumRuleCall_9_0; }
		
		//'course'
		public Keyword getCourseKeyword_10() { return cCourseKeyword_10; }
		
		//'category'
		public Keyword getCategoryKeyword_11() { return cCategoryKeyword_11; }
		
		//course_cat=STRING
		public Assignment getCourse_catAssignment_12() { return cCourse_catAssignment_12; }
		
		//STRING
		public RuleCall getCourse_catSTRINGTerminalRuleCall_12_0() { return cCourse_catSTRINGTerminalRuleCall_12_0; }
		
		//'taught'
		public Keyword getTaughtKeyword_13() { return cTaughtKeyword_13; }
		
		//'by'
		public Keyword getByKeyword_14() { return cByKeyword_14; }
		
		//(teachers+=Teacher)+
		public Assignment getTeachersAssignment_15() { return cTeachersAssignment_15; }
		
		//Teacher
		public RuleCall getTeachersTeacherParserRuleCall_15_0() { return cTeachersTeacherParserRuleCall_15_0; }
		
		//'visited'
		public Keyword getVisitedKeyword_16() { return cVisitedKeyword_16; }
		
		//'by'
		public Keyword getByKeyword_17() { return cByKeyword_17; }
		
		//(students+=Student)*
		public Assignment getStudentsAssignment_18() { return cStudentsAssignment_18; }
		
		//Student
		public RuleCall getStudentsStudentParserRuleCall_18_0() { return cStudentsStudentParserRuleCall_18_0; }
	}
	public class TeacherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swa.dsl.courses.Orga.Teacher");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Teacher:
		//    name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class StudentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swa.dsl.courses.Orga.Student");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Student:
		//    name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}
	public class RoomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "swa.dsl.courses.Orga.Room");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLocationSTRINGTerminalRuleCall_1_0 = (RuleCall)cLocationAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAudienceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAudienceAudienceSizeEnumRuleCall_3_0 = (RuleCall)cAudienceAssignment_3.eContents().get(0);
		
		//Room:
		//    'Room' location=STRING 'is' audience=AudienceSize
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Room' location=STRING 'is' audience=AudienceSize
		public Group getGroup() { return cGroup; }
		
		//'Room'
		public Keyword getRoomKeyword_0() { return cRoomKeyword_0; }
		
		//location=STRING
		public Assignment getLocationAssignment_1() { return cLocationAssignment_1; }
		
		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_1_0() { return cLocationSTRINGTerminalRuleCall_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//audience=AudienceSize
		public Assignment getAudienceAssignment_3() { return cAudienceAssignment_3; }
		
		//AudienceSize
		public RuleCall getAudienceAudienceSizeEnumRuleCall_3_0() { return cAudienceAudienceSizeEnumRuleCall_3_0; }
	}
	
	public class AudienceSizeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "swa.dsl.courses.Orga.AudienceSize");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSMALLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSMALLSmallKeyword_0_0 = (Keyword)cSMALLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMEDIUMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMEDIUMMediumKeyword_1_0 = (Keyword)cMEDIUMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBIGEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBIGBigKeyword_2_0 = (Keyword)cBIGEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AudienceSize:
		//    SMALL = 'small'| MEDIUM = 'medium' | BIG = 'big'
		//;
		public EnumRule getRule() { return rule; }
		
		//SMALL = 'small'| MEDIUM = 'medium' | BIG = 'big'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SMALL = 'small'
		public EnumLiteralDeclaration getSMALLEnumLiteralDeclaration_0() { return cSMALLEnumLiteralDeclaration_0; }
		
		//'small'
		public Keyword getSMALLSmallKeyword_0_0() { return cSMALLSmallKeyword_0_0; }
		
		//MEDIUM = 'medium'
		public EnumLiteralDeclaration getMEDIUMEnumLiteralDeclaration_1() { return cMEDIUMEnumLiteralDeclaration_1; }
		
		//'medium'
		public Keyword getMEDIUMMediumKeyword_1_0() { return cMEDIUMMediumKeyword_1_0; }
		
		//BIG = 'big'
		public EnumLiteralDeclaration getBIGEnumLiteralDeclaration_2() { return cBIGEnumLiteralDeclaration_2; }
		
		//'big'
		public Keyword getBIGBigKeyword_2_0() { return cBIGBigKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final DeclarationElements pDeclaration;
	private final CourseElements pCourse;
	private final TeacherElements pTeacher;
	private final StudentElements pStudent;
	private final RoomElements pRoom;
	private final AudienceSizeElements eAudienceSize;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OrgaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDeclaration = new DeclarationElements();
		this.pCourse = new CourseElements();
		this.pTeacher = new TeacherElements();
		this.pStudent = new StudentElements();
		this.pRoom = new RoomElements();
		this.eAudienceSize = new AudienceSizeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("swa.dsl.courses.Orga".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    declarations+=Declaration*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Declaration :
	//    Course | Room
	//;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Course:
	//    'Course' title=STRING
	//    'major' major=STRING
	//    'type' 'is' type=STRING
	//    'audience' 'is' audience=AudienceSize
	//    'course' 'category' course_cat=STRING
	//    'taught' 'by'
	//        (teachers+=Teacher)+
	//    'visited' 'by'
	//        (students+=Student)*;
	public CourseElements getCourseAccess() {
		return pCourse;
	}
	
	public ParserRule getCourseRule() {
		return getCourseAccess().getRule();
	}
	
	//Teacher:
	//    name=STRING;
	public TeacherElements getTeacherAccess() {
		return pTeacher;
	}
	
	public ParserRule getTeacherRule() {
		return getTeacherAccess().getRule();
	}
	
	//Student:
	//    name=STRING;
	public StudentElements getStudentAccess() {
		return pStudent;
	}
	
	public ParserRule getStudentRule() {
		return getStudentAccess().getRule();
	}
	
	//Room:
	//    'Room' location=STRING 'is' audience=AudienceSize
	//;
	public RoomElements getRoomAccess() {
		return pRoom;
	}
	
	public ParserRule getRoomRule() {
		return getRoomAccess().getRule();
	}
	
	//enum AudienceSize:
	//    SMALL = 'small'| MEDIUM = 'medium' | BIG = 'big'
	//;
	public AudienceSizeElements getAudienceSizeAccess() {
		return eAudienceSize;
	}
	
	public EnumRule getAudienceSizeRule() {
		return getAudienceSizeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
