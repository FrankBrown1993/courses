/*
 * generated by Xtext 2.32.0
 */
package swa.dsl.courses.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import swa.dsl.courses.ide.contentassist.antlr.internal.InternalOrgaParser;
import swa.dsl.courses.services.OrgaGrammarAccess;

public class OrgaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(OrgaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, OrgaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
			builder.put(grammarAccess.getAudienceSizeAccess().getAlternatives(), "rule__AudienceSize__Alternatives");
			builder.put(grammarAccess.getCourseAccess().getGroup(), "rule__Course__Group__0");
			builder.put(grammarAccess.getRoomAccess().getGroup(), "rule__Room__Group__0");
			builder.put(grammarAccess.getModelAccess().getDeclarationsAssignment(), "rule__Model__DeclarationsAssignment");
			builder.put(grammarAccess.getCourseAccess().getTitleAssignment_1(), "rule__Course__TitleAssignment_1");
			builder.put(grammarAccess.getCourseAccess().getMajorAssignment_3(), "rule__Course__MajorAssignment_3");
			builder.put(grammarAccess.getCourseAccess().getTypeAssignment_6(), "rule__Course__TypeAssignment_6");
			builder.put(grammarAccess.getCourseAccess().getAudienceAssignment_9(), "rule__Course__AudienceAssignment_9");
			builder.put(grammarAccess.getCourseAccess().getCourse_catAssignment_12(), "rule__Course__Course_catAssignment_12");
			builder.put(grammarAccess.getCourseAccess().getTeachersAssignment_15(), "rule__Course__TeachersAssignment_15");
			builder.put(grammarAccess.getCourseAccess().getStudentsAssignment_18(), "rule__Course__StudentsAssignment_18");
			builder.put(grammarAccess.getTeacherAccess().getNameAssignment(), "rule__Teacher__NameAssignment");
			builder.put(grammarAccess.getStudentAccess().getNameAssignment(), "rule__Student__NameAssignment");
			builder.put(grammarAccess.getRoomAccess().getLocationAssignment_1(), "rule__Room__LocationAssignment_1");
			builder.put(grammarAccess.getRoomAccess().getAudienceAssignment_3(), "rule__Room__AudienceAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private OrgaGrammarAccess grammarAccess;

	@Override
	protected InternalOrgaParser createParser() {
		InternalOrgaParser result = new InternalOrgaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public OrgaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(OrgaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
