/*
 * generated by Xtext 2.32.0
 */
grammar InternalOrga;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package swa.dsl.courses.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package swa.dsl.courses.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import swa.dsl.courses.services.OrgaGrammarAccess;

}
@parser::members {
	private OrgaGrammarAccess grammarAccess;

	public void setGrammarAccess(OrgaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getDeclarationsAssignment()); }
		(rule__Model__DeclarationsAssignment)*
		{ after(grammarAccess.getModelAccess().getDeclarationsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getCourseParserRuleCall()); }
		ruleCourse
		{ after(grammarAccess.getDeclarationAccess().getCourseParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCourse
entryRuleCourse
:
{ before(grammarAccess.getCourseRule()); }
	 ruleCourse
{ after(grammarAccess.getCourseRule()); } 
	 EOF 
;

// Rule Course
ruleCourse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCourseAccess().getGroup()); }
		(rule__Course__Group__0)
		{ after(grammarAccess.getCourseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTeacher
entryRuleTeacher
:
{ before(grammarAccess.getTeacherRule()); }
	 ruleTeacher
{ after(grammarAccess.getTeacherRule()); } 
	 EOF 
;

// Rule Teacher
ruleTeacher 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTeacherAccess().getNameAssignment()); }
		(rule__Teacher__NameAssignment)
		{ after(grammarAccess.getTeacherAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStudent
entryRuleStudent
:
{ before(grammarAccess.getStudentRule()); }
	 ruleStudent
{ after(grammarAccess.getStudentRule()); } 
	 EOF 
;

// Rule Student
ruleStudent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStudentAccess().getNameAssignment()); }
		(rule__Student__NameAssignment)
		{ after(grammarAccess.getStudentAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Course__Group__0__Impl
	rule__Course__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCourseAccess().getCourseKeyword_0()); }
	'Course'
	{ after(grammarAccess.getCourseAccess().getCourseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Course__Group__1__Impl
	rule__Course__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCourseAccess().getTitleAssignment_1()); }
	(rule__Course__TitleAssignment_1)
	{ after(grammarAccess.getCourseAccess().getTitleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Course__Group__2__Impl
	rule__Course__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCourseAccess().getTeachedKeyword_2()); }
	'teached'
	{ after(grammarAccess.getCourseAccess().getTeachedKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Course__Group__3__Impl
	rule__Course__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCourseAccess().getByKeyword_3()); }
	'by'
	{ after(grammarAccess.getCourseAccess().getByKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Course__Group__4__Impl
	rule__Course__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCourseAccess().getTeachersAssignment_4()); }
		(rule__Course__TeachersAssignment_4)
		{ after(grammarAccess.getCourseAccess().getTeachersAssignment_4()); }
	)
	(
		{ before(grammarAccess.getCourseAccess().getTeachersAssignment_4()); }
		(rule__Course__TeachersAssignment_4)*
		{ after(grammarAccess.getCourseAccess().getTeachersAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Course__Group__5__Impl
	rule__Course__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCourseAccess().getVisitedKeyword_5()); }
	'visited'
	{ after(grammarAccess.getCourseAccess().getVisitedKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Course__Group__6__Impl
	rule__Course__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCourseAccess().getByKeyword_6()); }
	'by'
	{ after(grammarAccess.getCourseAccess().getByKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Course__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCourseAccess().getStudentsAssignment_7()); }
		(rule__Course__StudentsAssignment_7)
		{ after(grammarAccess.getCourseAccess().getStudentsAssignment_7()); }
	)
	(
		{ before(grammarAccess.getCourseAccess().getStudentsAssignment_7()); }
		(rule__Course__StudentsAssignment_7)*
		{ after(grammarAccess.getCourseAccess().getStudentsAssignment_7()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__DeclarationsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_0()); }
		ruleDeclaration
		{ after(grammarAccess.getModelAccess().getDeclarationsDeclarationParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__TitleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCourseAccess().getTitleSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getCourseAccess().getTitleSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__TeachersAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCourseAccess().getTeachersTeacherParserRuleCall_4_0()); }
		ruleTeacher
		{ after(grammarAccess.getCourseAccess().getTeachersTeacherParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Course__StudentsAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCourseAccess().getStudentsStudentParserRuleCall_7_0()); }
		ruleStudent
		{ after(grammarAccess.getCourseAccess().getStudentsStudentParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Teacher__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTeacherAccess().getNameSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getTeacherAccess().getNameSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Student__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStudentAccess().getNameSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStudentAccess().getNameSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
